[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NYC Dispatch Calls: An Arrow Demo",
    "section": "",
    "text": "NYC’s EMS dispatch data contains 27M records, resulting in a 5.88GB csv. (Data link)\n\nlist.files(\"data\")\n# [1] \"EMS_Incident_Dispatch_Data_20250119.csv\"\n\nlist.files(\"data\", full.names = T) |&gt; \n  file.size() |&gt; \n  scales::comma()\n# 6,317,252,621 Bytes\n# 5.88 GB\n\nThis can fit in my computer’s memory, but for demonstration purposes I will pretend this is beyond my RAM (16GB). I will split this dataset into manageable parquet files using arrow.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "demo.html",
    "href": "demo.html",
    "title": "NYC EMS Dispatch Data",
    "section": "",
    "text": "Warning: package 'arrow' was built under R version 4.3.3\n\n\n\nAttaching package: 'arrow'\n\n\nThe following object is masked from 'package:utils':\n\n    timestamp\n\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3",
    "crumbs": [
      "Demo"
    ]
  },
  {
    "objectID": "demo.html#create-parquet-files",
    "href": "demo.html#create-parquet-files",
    "title": "NYC Dispatch Calls: An Arrow Demo",
    "section": "Create Parquet Files",
    "text": "Create Parquet Files\nAfter connecting to the dataset, I can scan through columns to pick a base for my parquet files.\n\ntic()\nems_nyc_full &lt;- arrow::open_dataset(\n  sources = \"data/EMS_Incident_Dispatch_Data_20250119.csv\", \n  col_types = schema(),\n  format = \"csv\"\n)\ntoc() # 0.07 sec\n\n\ntic()\nglimpse(ems_nyc_full)\ntoc() # 40.22 sec elapsed\n\n# FileSystemDataset with 1 csv file\n# 27,223,682 rows x 31 columns\n# $ CAD_INCIDENT_ID                 &lt;int64&gt; 71262688, 71262787, …\n# $ INCIDENT_DATETIME              &lt;string&gt; \"05/06/2007 06:21:01…\n# $ INITIAL_CALL_TYPE              &lt;string&gt; \"STNDBY\", \"UNC\", \"CA…\n# $ INITIAL_SEVERITY_LEVEL_CODE     &lt;int64&gt; 8, 2, 3, 5, 7, 2, 6,…\n# $ FINAL_CALL_TYPE                &lt;string&gt; \"STNDBY\", \"UNC\", \"CA…\n# $ FINAL_SEVERITY_LEVEL_CODE       &lt;int64&gt; 8, 2, 3, 5, 7, 2, 6,…\n# $ FIRST_ASSIGNMENT_DATETIME      &lt;string&gt; \"\", \"05/06/2007 06:5…\n# $ VALID_DISPATCH_RSPNS_TIME_INDC &lt;string&gt; \"N\", \"Y\", \"Y\", \"Y\", …\n# $ DISPATCH_RESPONSE_SECONDS_QY    &lt;int64&gt; 0, 12, 60, 0, 154, 5…\n# $ FIRST_ACTIVATION_DATETIME      &lt;string&gt; \"\", \"05/06/2007 06:5…\n# $ FIRST_ON_SCENE_DATETIME        &lt;string&gt; \"\", \"05/06/2007 07:0…\n# $ VALID_INCIDENT_RSPNS_TIME_INDC &lt;string&gt; \"N\", \"Y\", \"N\", \"Y\", …\n# $ INCIDENT_RESPONSE_SECONDS_QY    &lt;int64&gt; NA, 391, NA, 0, 262,…\n# $ INCIDENT_TRAVEL_TM_SECONDS_QY   &lt;int64&gt; NA, 379, NA, 0, 108,…\n# $ FIRST_TO_HOSP_DATETIME         &lt;string&gt; \"\", \"\", \"\", \"05/06/2…\n# $ FIRST_HOSP_ARRIVAL_DATETIME    &lt;string&gt; \"\", \"\", \"\", \"05/06/2…\n# $ INCIDENT_CLOSE_DATETIME        &lt;string&gt; \"05/06/2007 06:21:01…\n# $ HELD_INDICATOR                 &lt;string&gt; \"N\", \"N\", \"N\", \"N\", …\n# $ INCIDENT_DISPOSITION_CODE      &lt;string&gt; \"NOTSNT\", \"90\", \"87\"…\n# $ BOROUGH                        &lt;string&gt; \"QUEENS\", \"BRONX\", \"…\n# $ INCIDENT_DISPATCH_AREA         &lt;string&gt; \"Q2\", \"B3\", \"Q2\", \"M…\n# $ ZIPCODE                         &lt;int64&gt; NA, NA, NA, 10036, 1…\n# $ POLICEPRECINCT                  &lt;int64&gt; NA, NA, NA, 14, 47, …\n# $ CITYCOUNCILDISTRICT             &lt;int64&gt; NA, NA, NA, 3, 12, 1…\n# $ COMMUNITYDISTRICT               &lt;int64&gt; NA, NA, NA, 104, 212…\n# $ COMMUNITYSCHOOLDISTRICT         &lt;int64&gt; NA, NA, NA, 2, 11, 2…\n# $ CONGRESSIONALDISTRICT           &lt;int64&gt; NA, NA, NA, 10, 16, …\n# $ REOPEN_INDICATOR               &lt;string&gt; \"N\", \"N\", \"N\", \"N\", …\n# $ SPECIAL_EVENT_INDICATOR        &lt;string&gt; \"N\", \"N\", \"N\", \"N\", …\n# $ STANDBY_INDICATOR              &lt;string&gt; \"Y\", \"N\", \"N\", \"N\", …\n# $ TRANSFER_INDICATOR             &lt;string&gt; \"N\", \"N\", \"N\", \"N\", …\n\nIdeally, I would create parquet files by year. However, all date columns were stored as strings.\nIn lieu of a prepared date variable, I will split EMS incidents by {BOROUGH}.\n\ntic()\nems_nyc_full |&gt; \n  group_by(BOROUGH) |&gt; \n  count(sort = T) |&gt; \n  collect()\ntoc()\n# 13.48 sec elapsed\n\n# A tibble: 6 × 2\n# Groups:   BOROUGH [6]\n# BOROUGH                        n\n# &lt;chr&gt;                      &lt;int&gt;\n# 1 BROOKLYN                 7747447\n# 2 MANHATTAN                6717310\n# 3 BRONX                    6316780\n# 4 QUEENS                   5314633\n# 5 RICHMOND / STATEN ISLAND 1127300\n# 6 UNKNOWN                      212\n\n\ntic()\nems_nyc_full |&gt;\n  group_by(BOROUGH) |&gt; \n  arrow::write_dataset(path = \"data/ems-nyc\", format = \"parquet\")\ntoc()\n# 55.36 sec elapsed\n\nThis created sub-folders named after each Borough. Each contains a parquet file, most of which being in the ideal 20MB - 2GB range.\n\ntibble(\n  files = list.files(\"data/ems-nyc\", recursive = TRUE),\n  mb = file.size(file.path(\"data/ems-nyc\", files)) / 1024^2 \n) |&gt; \n  janitor::adorn_totals() |&gt; \n  mutate(mb = scales::comma(mb))\n\n# files                                mb\n# BOROUGH=BRONX/part-0.parquet         480\n# BOROUGH=BROOKLYN/part-0.parquet      573\n# BOROUGH=MANHATTAN/part-0.parquet     506\n# BOROUGH=QUEENS/part-0.parquet        416\n# BOROUGH=RICHMOND.../part-0.parquet   126\n# BOROUGH=UNKNOWN/part-0.parquet       1\n# Total                                2,102\n\nThese compressed files sum to 2.05GB - a sharp decrease from the original 5.88GB!",
    "crumbs": [
      "Demo"
    ]
  },
  {
    "objectID": "demo.html#import-parquet",
    "href": "demo.html#import-parquet",
    "title": "NYC Dispatch Calls: An Arrow Demo",
    "section": "Import Parquet",
    "text": "Import Parquet\nI can once again use open_dataset() to establish a connection to my data. In this case, I will use my compressed parquet files.\n\nems_nyc_parquet &lt;- open_dataset(\"data/ems-nyc\")\n\nI will analyze final call types. This is an assigned severity for each incident based on caller details.\n\nems_nyc_parquet |&gt; \n  group_by(FINAL_CALL_TYPE) |&gt; \n  count(sort = T) |&gt; \n  collect()\n\n#    FINAL_CALL_TYPE       n\n#    &lt;chr&gt;             &lt;int&gt;\n#  1 SICK            4049378\n#  2 INJURY          3714001\n#  3 DIFFBR          1950231\n#  4 EDP             1681874\n#  5 DRUG            1663994\n#  6 UNC             1527166\n#  7 UNKNOW          1302306\n#  8 CARD            1203100\n#  9 ABDPN           1153570\n# 10 MVAINJ           869055\n\nTo decode these acronyms, I must merge the data dictionary file EMS_incident_dispatch_data_description.xlsx.\n\ncall_types_raw &lt;- readxl::read_xlsx(\n  \"data/EMS_incident_dispatch_data_description.xlsx\",\n  sheet = 3\n)\ncolnames(call_types_raw) &lt;- paste(\n  \"call\", c(\"code\", \"description\"),\n  sep = \"_\"\n)\n\n\nJoins\nI could convert my call_types_raw to a parquet file. However, it’d be much easier on R’s memory to collect() summary tables, then tack on the metadata. Additionally, parquet files only allow a narrow set of dplyr verbs to be applied. Collecting the summary tables circumvents this.\n\n### Quick but restricting approach\n\n# Convenient but requires more memory\ncall_types_arrow &lt;- arrow_table(call_types_raw)\n\n# Resulting file is compatible with limited set of dplyr verbs\nems_nyc_join &lt;- ems_nyc_parquet |&gt;\n  left_join(call_types_arrow,\n            by = c(\"FINAL_CALL_TYPE\" = \"call_code\")) \n\n\n### Longer but flexible approach\n\n# Collect summary tables\nborough_call_types &lt;- ems_nyc_parquet |&gt; \n  group_by(BOROUGH, FINAL_CALL_TYPE) |&gt; \n  count() |&gt; \n  collect()\n\n# Then, append metadata as normal\n# Can apply more functions, such as slice()\nborough_call_types_top5 &lt;- borough_call_types |&gt; \n  left_join(call_types_raw,\n            by = c(\"FINAL_CALL_TYPE\" = \"call_code\")) |&gt; \n  arrange(BOROUGH, desc(n)) |&gt; \n  group_by(BOROUGH) |&gt; \n  slice(1:5) |&gt;\n  mutate(temp = 1) |&gt; \n  mutate(rank = cumsum(temp),\n         call_description = \n           stringr::str_to_title(call_description)) |&gt; \n  select(borough = BOROUGH, \n         rank, \n         call_code = FINAL_CALL_TYPE,\n         call_description, \n         calls = n)\n\nA quick glance of the summary table, to be used in Analysis:\n\nborough_call_types_top5 |&gt; head()\n\n#   borough   rank call_code call_description      calls\n#   &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;                 &lt;int&gt;\n# 1 BRONX        1 SICK      Sick                1019300\n# 2 BRONX        2 INJURY    Non-Critical Injury  839998\n# 3 BRONX        3 DIFFBR    Difficult Breather   513740\n# 4 BRONX        4 EDP       Psychiatric Patient  391644\n# 5 BRONX        5 ABDPN     Abdominal Pain       327507\n# 6 BROOKLYN     1 SICK      Sick                1173287",
    "crumbs": [
      "Demo"
    ]
  },
  {
    "objectID": "demo.html#analysis",
    "href": "demo.html#analysis",
    "title": "NYC Dispatch Calls: An Arrow Demo",
    "section": "Analysis",
    "text": "Analysis\nTo my summary table, I’ve added borough acryonyms for easy plotting. I adapted the beautiful color palette, Anchoviella Lepidentostole, from the R package fishualize.\n\n\nShow data viz prep code\n# order Call Types by overall ranking \ncall_types_order &lt;- borough_call_types_top5 |&gt;\n  filter(borough != \"UNKNOWN\") |&gt; \n  group_by(call_description) |&gt; \n  mutate(overall_calls = sum(calls)) |&gt; \n  ungroup() |&gt;\n  mutate(call_description = forcats::fct_reorder(\n    .f = call_description,\n    .x = overall_calls)\n    ) |&gt; \n  mutate(borough_ac = case_when(\n    borough == \"BRONX\" ~ \"BX\",\n    borough == \"BROOKLYN\" ~ \"BK\",\n    borough == \"MANHATTAN\" ~ \"MN\",\n    borough == \"QUEENS\" ~ \"QN\",\n    borough == \"RICHMOND / STATEN ISLAND\" ~ \"SI\",\n  )) |&gt; \n  rowwise() |&gt; \n  mutate(borough_full = paste0(borough, \" (\", borough_ac, \")\"))\n\n\n\n\nShow table code\ncall_types_order |&gt; \n  select(\n    `Borough` = borough,\n    `Acryn` = borough_ac,\n    `Code` = call_code,\n    `Description` = call_description,\n    `Calls` = calls,\n    `Rank` = rank,\n  ) |&gt; \n  DT::datatable(\n    options = list(\n     dom = \"tp\",\n     autoWidth = TRUE, # coerce colwidths\n     columnDefs = list(\n       list(width = '15%', targets = c(0, 1, 2, 5)), # index starts at 0\n       list(width = '20%', targets = c(3, 4))\n       ),\n     initComplete = JS(\n    \"function(settings, json) {\",\n    \"$(this.api().table().header()).css({'background-color': '#8b6969', 'color': '#fff'});\",\n    \"}\")\n   ),\n   rownames = F,\n   class = 'compact stripe',\n   width = '95%'\n  ) |&gt;\n  DT::formatRound(c('Calls'), digits = 0)\n\n\n\n\n\n\n\n\nFirst, a relative comparison of Top 5 codes.\n\n\nShow ggplot code\ncall_types_order |&gt; \n  mutate(call_description = forcats::fct_rev(call_description)) |&gt; \n  ggplot() +\n  geom_bar(aes(x = borough_ac,\n               y = calls,\n               fill = call_description),\n           stat = 'identity',\n           color = \"rosybrown4\",\n           width = 0.9,\n           position = \"fill\") +\n  ggtitle(\"NYC EMS Dispatch Call Codes Distribution\") +\n  labs(x = \"\", y = \"\",\n       subtitle = \"Distribution of each borough's top 5 codes (2007-2024)\") +\n  scale_fill_manual(\n    values = c(\"#dc8787\", # sick\n               \"#8A7036\", # non-critical injury \n               \"#E7E9E4\", # psych - SWAP\n               \"#8b6969\", # difficult breather\n               \"#A7988D\", # hx or alcohol \n               \"#9e751f\", # unconsious \n               \"#CE9B89\" # abdominal pain  \n               ) \n  ) +\n  \n  # For Source Sans, increase font sizes by **10**\n  theme(text = element_text(family = \"Source Sans\"),\n        legend.position = \"right\",\n        legend.title = element_blank(),\n        legend.text = element_text(size = 22,\n                                   colour = \"#000000\"),\n        plot.subtitle = element_text(size = 24),\n        panel.background = element_rect(fill = \"#FFFFFF\"),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 22, \n                                   colour = \"#000000\"),\n        plot.title = element_text(family = \"Source Sans Bold\",\n                                  size = 26))\n\n\n\n\n\n\n\n\n\n\n\nFor scale, an absolute comparison of these Top 5 codes:\n\n\nShow ggplot code\n# plot ordered data\ncall_types_order |&gt; \n  ggplot() +\n  geom_bar(aes(x = call_description,\n               y = calls),\n           stat = 'identity',\n           color = \"rosybrown4\",\n           fill = \"rosybrown1\",\n           width = 0.9) +\n  facet_wrap(~borough_full, ncol = 1) +\n  scale_y_continuous(labels = scales::label_comma(),\n                     breaks = scales::breaks_extended(3)) +\n  labs(y = \"Number of calls\", x = \"\",\n       subtitle = \"Volume of calls for each borough's top 5 codes (2007-2024)\") +\n  ggtitle(\"NYC EMS Dispatch Call Volumes\") +\n  coord_flip() +\n  theme_light() +\n  \n  # For Source Sans, increase font sizes by **10**\n  theme(text = element_text(family = \"Source Sans\"),\n        axis.text = element_text(size = 24,\n                                 colour = \"#000000\"),\n        axis.title = element_text(size = 24),\n        strip.background = element_rect(fill = \"rosybrown4\", \n                colour = NA),\n        strip.text = element_text(size = 22),\n        plot.subtitle = element_text(size = 24),\n        plot.title = element_text(family = \"Source Sans Bold\",\n                                  size = 26)\n        )\n\n\n\n\n\n\n\n\n\nThese call categorizations present an opportunity for public health, policy research, and journalism:\n\nThe frequency of Difficult Breather calls could be mapped against contagious disease outbreaks (i.e., influenza) to estimate health burden.\n\nThe frequency of Psychiatric Patient calls may be compared between boroughs with highly contrasting mental health and housing policies.\n\nIdentifying high call volume days may inform resource allocation for subsequent years. For instance, 4th of July is a day with exceptional fire hazards.",
    "crumbs": [
      "Demo"
    ]
  },
  {
    "objectID": "demo.html#introduction",
    "href": "demo.html#introduction",
    "title": "NYC Dispatch Calls: An Arrow Demo",
    "section": "Introduction",
    "text": "Introduction\nNYC’s EMS dispatch data contains 27M records, resulting in a 5.88GB csv. (Data link - open in new tab)\n\nlist.files(\"data\")\n# [1] \"EMS_Incident_Dispatch_Data_20250119.csv\"\n\nlist.files(\"data\", full.names = T) |&gt; \n  file.size() |&gt; \n  scales::comma()\n# 6,317,252,621 Bytes\n# 5.88 GB\n\nThis could fit in my computer’s memory, but for demonstration purposes I will pretend this is beyond my RAM (16GB). I will split this dataset into manageable parquet files using arrow.",
    "crumbs": [
      "Demo"
    ]
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "NYC Dispatch Calls: An Arrow Demo",
    "section": "",
    "text": "NYC’s EMS dispatch data contains 27M records, resulting in a 5.88GB csv. (Data link)\n\nlist.files(\"data\")\n# [1] \"EMS_Incident_Dispatch_Data_20250119.csv\"\n\nlist.files(\"data\", full.names = T) |&gt; \n  file.size() |&gt; \n  scales::comma()\n# 6,317,252,621 Bytes\n# 5.88 GB\n\nThis can fit in my computer’s memory, but for demonstration purposes I will pretend this is beyond my RAM (16GB). I will split this dataset into manageable parquet files using arrow.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#create-parquet-files",
    "href": "index.html#create-parquet-files",
    "title": "NYC Dispatch Calls: An Arrow Demo",
    "section": "Create Parquet Files",
    "text": "Create Parquet Files\nAfter connecting to the dataset, I can scan through columns to pick a base for my parquet files.\n\ntic()\nems_nyc_full &lt;- arrow::open_dataset(\n  sources = \"data/EMS_Incident_Dispatch_Data_20250119.csv\", \n  col_types = schema(),\n  format = \"csv\"\n)\ntoc() # 0.07 sec\n\n\ntic()\nglimpse(ems_nyc_full)\ntoc() # 40.22 sec elapsed\n\n# FileSystemDataset with 1 csv file\n# 27,223,682 rows x 31 columns\n# $ CAD_INCIDENT_ID                 &lt;int64&gt; 71262688, 71262787, …\n# $ INCIDENT_DATETIME              &lt;string&gt; \"05/06/2007 06:21:01…\n# $ INITIAL_CALL_TYPE              &lt;string&gt; \"STNDBY\", \"UNC\", \"CA…\n# $ INITIAL_SEVERITY_LEVEL_CODE     &lt;int64&gt; 8, 2, 3, 5, 7, 2, 6,…\n# $ FINAL_CALL_TYPE                &lt;string&gt; \"STNDBY\", \"UNC\", \"CA…\n# $ FINAL_SEVERITY_LEVEL_CODE       &lt;int64&gt; 8, 2, 3, 5, 7, 2, 6,…\n# $ FIRST_ASSIGNMENT_DATETIME      &lt;string&gt; \"\", \"05/06/2007 06:5…\n# $ VALID_DISPATCH_RSPNS_TIME_INDC &lt;string&gt; \"N\", \"Y\", \"Y\", \"Y\", …\n# $ DISPATCH_RESPONSE_SECONDS_QY    &lt;int64&gt; 0, 12, 60, 0, 154, 5…\n# $ FIRST_ACTIVATION_DATETIME      &lt;string&gt; \"\", \"05/06/2007 06:5…\n# $ FIRST_ON_SCENE_DATETIME        &lt;string&gt; \"\", \"05/06/2007 07:0…\n# $ VALID_INCIDENT_RSPNS_TIME_INDC &lt;string&gt; \"N\", \"Y\", \"N\", \"Y\", …\n# $ INCIDENT_RESPONSE_SECONDS_QY    &lt;int64&gt; NA, 391, NA, 0, 262,…\n# $ INCIDENT_TRAVEL_TM_SECONDS_QY   &lt;int64&gt; NA, 379, NA, 0, 108,…\n# $ FIRST_TO_HOSP_DATETIME         &lt;string&gt; \"\", \"\", \"\", \"05/06/2…\n# $ FIRST_HOSP_ARRIVAL_DATETIME    &lt;string&gt; \"\", \"\", \"\", \"05/06/2…\n# $ INCIDENT_CLOSE_DATETIME        &lt;string&gt; \"05/06/2007 06:21:01…\n# $ HELD_INDICATOR                 &lt;string&gt; \"N\", \"N\", \"N\", \"N\", …\n# $ INCIDENT_DISPOSITION_CODE      &lt;string&gt; \"NOTSNT\", \"90\", \"87\"…\n# $ BOROUGH                        &lt;string&gt; \"QUEENS\", \"BRONX\", \"…\n# $ INCIDENT_DISPATCH_AREA         &lt;string&gt; \"Q2\", \"B3\", \"Q2\", \"M…\n# $ ZIPCODE                         &lt;int64&gt; NA, NA, NA, 10036, 1…\n# $ POLICEPRECINCT                  &lt;int64&gt; NA, NA, NA, 14, 47, …\n# $ CITYCOUNCILDISTRICT             &lt;int64&gt; NA, NA, NA, 3, 12, 1…\n# $ COMMUNITYDISTRICT               &lt;int64&gt; NA, NA, NA, 104, 212…\n# $ COMMUNITYSCHOOLDISTRICT         &lt;int64&gt; NA, NA, NA, 2, 11, 2…\n# $ CONGRESSIONALDISTRICT           &lt;int64&gt; NA, NA, NA, 10, 16, …\n# $ REOPEN_INDICATOR               &lt;string&gt; \"N\", \"N\", \"N\", \"N\", …\n# $ SPECIAL_EVENT_INDICATOR        &lt;string&gt; \"N\", \"N\", \"N\", \"N\", …\n# $ STANDBY_INDICATOR              &lt;string&gt; \"Y\", \"N\", \"N\", \"N\", …\n# $ TRANSFER_INDICATOR             &lt;string&gt; \"N\", \"N\", \"N\", \"N\", …\n\nIdeally, I would create parquet files by year. However, all date columns were stored as strings.\nIn lieu of a prepared date variable, I will split EMS incidents by {BOROUGH}.\n\ntic()\nems_nyc_full |&gt; \n  group_by(BOROUGH) |&gt; \n  count(sort = T) |&gt; \n  collect()\ntoc()\n# 13.48 sec elapsed\n\n# A tibble: 6 × 2\n# Groups:   BOROUGH [6]\n# BOROUGH                        n\n# &lt;chr&gt;                      &lt;int&gt;\n# 1 BROOKLYN                 7747447\n# 2 MANHATTAN                6717310\n# 3 BRONX                    6316780\n# 4 QUEENS                   5314633\n# 5 RICHMOND / STATEN ISLAND 1127300\n# 6 UNKNOWN                      212\n\n\ntic()\nems_nyc_full |&gt;\n  group_by(BOROUGH) |&gt; \n  arrow::write_dataset(path = \"data/ems-nyc\", format = \"parquet\")\ntoc()\n# 55.36 sec elapsed\n\nThis created sub-folders named after each Borough. Each contains a parquet file, most of which being in the ideal 20MB - 2GB range.\n\ntibble(\n  files = list.files(\"data/ems-nyc\", recursive = TRUE),\n  mb = file.size(file.path(\"data/ems-nyc\", files)) / 1024^2 \n) |&gt; \n  janitor::adorn_totals() |&gt; \n  mutate(mb = scales::comma(mb))\n\n# files                                mb\n# BOROUGH=BRONX/part-0.parquet         480\n# BOROUGH=BROOKLYN/part-0.parquet      573\n# BOROUGH=MANHATTAN/part-0.parquet     506\n# BOROUGH=QUEENS/part-0.parquet        416\n# BOROUGH=RICHMOND.../part-0.parquet   126\n# BOROUGH=UNKNOWN/part-0.parquet       1\n# Total                                2,102\n\nThese compressed files sum to 2.05GB - a sharp decrease from the original 5.88GB!",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#import-parquet",
    "href": "index.html#import-parquet",
    "title": "NYC Dispatch Calls: An Arrow Demo",
    "section": "Import Parquet",
    "text": "Import Parquet\nI can once again use open_dataset() to establish a connection to my data. In this case, I will use my compressed parquet files.\n\nems_nyc_parquet &lt;- open_dataset(\"data/ems-nyc\")\n\nI will analyze final call types. This is an assigned severity for each incident based on caller details.\n\nems_nyc_parquet |&gt; \n  group_by(FINAL_CALL_TYPE) |&gt; \n  count(sort = T) |&gt; \n  collect()\n\n#    FINAL_CALL_TYPE       n\n#    &lt;chr&gt;             &lt;int&gt;\n#  1 SICK            4049378\n#  2 INJURY          3714001\n#  3 DIFFBR          1950231\n#  4 EDP             1681874\n#  5 DRUG            1663994\n#  6 UNC             1527166\n#  7 UNKNOW          1302306\n#  8 CARD            1203100\n#  9 ABDPN           1153570\n# 10 MVAINJ           869055\n\nTo decode these acronyms, I must merge the data dictionary file EMS_incident_dispatch_data_description.xlsx.\n\ncall_types_raw &lt;- readxl::read_xlsx(\n  \"data/EMS_incident_dispatch_data_description.xlsx\",\n  sheet = 3\n)\ncolnames(call_types_raw) &lt;- paste(\n  \"call\", c(\"code\", \"description\"),\n  sep = \"_\"\n)\n\n\nJoins\nI could convert my call_types_raw to a parquet file. However, it’d be much easier on R’s memory to collect() summary tables, then tack on the metadata. Additionally, parquet files only allow a narrow set of dplyr verbs to be applied. Collecting the summary tables circumvents this.\n\n### Quick but restricting approach\n\n# Convenient but requires more memory\ncall_types_arrow &lt;- arrow_table(call_types_raw)\n\n# Resulting file is compatible with limited set of dplyr verbs\nems_nyc_join &lt;- ems_nyc_parquet |&gt;\n  left_join(call_types_arrow,\n            by = c(\"FINAL_CALL_TYPE\" = \"call_code\")) \n\n\n### Longer but flexible approach\n\n# Collect summary tables\nborough_call_types &lt;- ems_nyc_parquet |&gt; \n  group_by(BOROUGH, FINAL_CALL_TYPE) |&gt; \n  count() |&gt; \n  collect()\n\n# Then, append metadata as normal\n# Can apply more functions, such as slice()\nborough_call_types_top5 &lt;- borough_call_types |&gt; \n  left_join(call_types_raw,\n            by = c(\"FINAL_CALL_TYPE\" = \"call_code\")) |&gt; \n  arrange(BOROUGH, desc(n)) |&gt; \n  group_by(BOROUGH) |&gt; \n  slice(1:5) |&gt;\n  mutate(temp = 1) |&gt; \n  mutate(rank = cumsum(temp),\n         call_description = \n           stringr::str_to_title(call_description)) |&gt; \n  select(borough = BOROUGH, \n         rank, \n         call_code = FINAL_CALL_TYPE,\n         call_description, \n         calls = n)\n\nA quick glance of the summary table, to be used in Analysis:\n\nborough_call_types_top5 |&gt; head()\n\n#   borough   rank call_code call_description      calls\n#   &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;                 &lt;int&gt;\n# 1 BRONX        1 SICK      Sick                1019300\n# 2 BRONX        2 INJURY    Non-Critical Injury  839998\n# 3 BRONX        3 DIFFBR    Difficult Breather   513740\n# 4 BRONX        4 EDP       Psychiatric Patient  391644\n# 5 BRONX        5 ABDPN     Abdominal Pain       327507\n# 6 BROOKLYN     1 SICK      Sick                1173287",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#analysis",
    "href": "index.html#analysis",
    "title": "NYC Dispatch Calls: An Arrow Demo",
    "section": "Analysis",
    "text": "Analysis\nTo my summary table, I’ve added borough acryonyms for easy plotting. I adapted the beautiful color palette, Anchoviella Lepidentostole, from the R package fishualize.\n\n\nShow data viz prep code\n# order Call Types by overall ranking \ncall_types_order &lt;- borough_call_types_top5 |&gt;\n  filter(borough != \"UNKNOWN\") |&gt; \n  group_by(call_description) |&gt; \n  mutate(overall_calls = sum(calls)) |&gt; \n  ungroup() |&gt;\n  mutate(call_description = forcats::fct_reorder(\n    .f = call_description,\n    .x = overall_calls)\n    ) |&gt; \n  mutate(borough_ac = case_when(\n    borough == \"BRONX\" ~ \"BX\",\n    borough == \"BROOKLYN\" ~ \"BK\",\n    borough == \"MANHATTAN\" ~ \"MN\",\n    borough == \"QUEENS\" ~ \"QN\",\n    borough == \"RICHMOND / STATEN ISLAND\" ~ \"SI\",\n  )) |&gt; \n  rowwise() |&gt; \n  mutate(borough_full = paste0(borough, \" (\", borough_ac, \")\"))\n\n\n\n\nShow table code\ncall_types_order |&gt; \n  select(\n    `Borough` = borough,\n    `Acryn` = borough_ac,\n    `Code` = call_code,\n    `Description` = call_description,\n    `Calls` = calls,\n    `Rank` = rank,\n  ) |&gt; \n  DT::datatable(\n    options = list(\n     dom = \"tp\",\n     autoWidth = TRUE, # coerce colwidths\n     columnDefs = list(\n       list(width = '15%', targets = c(0, 1, 2, 5)), # index starts at 0\n       list(width = '20%', targets = c(3, 4))\n       ),\n     initComplete = JS(\n    \"function(settings, json) {\",\n    \"$(this.api().table().header()).css({'background-color': '#8b6969', 'color': '#fff'});\",\n    \"}\")\n   ),\n   rownames = F,\n   class = 'compact stripe',\n   width = '95%'\n  ) |&gt;\n  DT::formatRound(c('Calls'), digits = 0)\n\n\n\n\n\n\n\n\nFirst, a relative comparison of Top 5 codes.\n\n\nShow ggplot code\ncall_types_order |&gt; \n  mutate(call_description = forcats::fct_rev(call_description)) |&gt; \n  ggplot() +\n  geom_bar(aes(x = borough_ac,\n               y = calls,\n               fill = call_description),\n           stat = 'identity',\n           color = \"rosybrown4\",\n           width = 0.9,\n           position = \"fill\") +\n  ggtitle(\"NYC EMS Dispatch Call Codes Distribution\") +\n  labs(x = \"\", y = \"\",\n       subtitle = \"Distribution of each borough's top 5 codes (2007-2024)\") +\n  scale_fill_manual(\n    values = c(\"#dc8787\", # sick\n               \"#8A7036\", # non-critical injury \n               \"#E7E9E4\", # psych - SWAP\n               \"#8b6969\", # difficult breather\n               \"#A7988D\", # hx or alcohol \n               \"#9e751f\", # unconsious \n               \"#CE9B89\" # abdominal pain  \n               ) \n  ) +\n  \n  # For Source Sans, increase font sizes by **10**\n  theme(text = element_text(family = \"Source Sans\"),\n        legend.position = \"right\",\n        legend.title = element_blank(),\n        legend.text = element_text(size = 22,\n                                   colour = \"#000000\"),\n        plot.subtitle = element_text(size = 24),\n        panel.background = element_rect(fill = \"#FFFFFF\"),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 22, \n                                   colour = \"#000000\"),\n        plot.title = element_text(family = \"Source Sans Bold\",\n                                  size = 26))\n\n\n\n\n\n\n\n\n\n\n\nFor scale, an absolute comparison of these Top 5 codes:\n\n\nShow ggplot code\n# plot ordered data\ncall_types_order |&gt; \n  ggplot() +\n  geom_bar(aes(x = call_description,\n               y = calls),\n           stat = 'identity',\n           color = \"rosybrown4\",\n           fill = \"rosybrown1\",\n           width = 0.9) +\n  facet_wrap(~borough_full, ncol = 1) +\n  scale_y_continuous(labels = scales::label_comma(),\n                     breaks = scales::breaks_extended(3)) +\n  labs(y = \"Number of calls\", x = \"\",\n       subtitle = \"Volume of calls for each borough's top 5 codes (2007-2024)\") +\n  ggtitle(\"NYC EMS Dispatch Call Volumes\") +\n  coord_flip() +\n  theme_light() +\n  \n  # For Source Sans, increase font sizes by **10**\n  theme(text = element_text(family = \"Source Sans\"),\n        axis.text = element_text(size = 24,\n                                 colour = \"#000000\"),\n        axis.title = element_text(size = 24),\n        strip.background = element_rect(fill = \"rosybrown4\", \n                colour = NA),\n        strip.text = element_text(size = 22),\n        plot.subtitle = element_text(size = 24),\n        plot.title = element_text(family = \"Source Sans Bold\",\n                                  size = 26)\n        )\n\n\n\n\n\n\n\n\n\nThese call categorizations present an opportunity for public health, policy research, and journalism:\n\nThe frequency of Difficult Breather calls could be mapped against contagious disease outbreaks (i.e., influenza) to estimate health burden.\n\nThe frequency of Psychiatric Patient calls may be compared between boroughs with highly contrasting mental health and housing policies.\n\nIdentifying high call volume days may inform resource allocation for subsequent years. For instance, 4th of July is a day with exceptional fire hazards.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index_old.html",
    "href": "index_old.html",
    "title": "arrow-ems",
    "section": "",
    "text": "Hi welcome to my project\nShort blurb about Arrow\nShort blurb about dataset\nDirect to Demo file"
  }
]